user  root;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {

	include mime.types;

	server {
		listen 80 default_server;
		listen [::]:80 default_server;
		server_name _;
		return 301 https://$host$request_uri;
	}

	server {
		listen       443 ssl http2 default_server;
		listen       [::]:443 ssl http2 default_server;
		server_name  _;

		ssl_certificate "/etc/nginx/cert/crt.crt";
		ssl_certificate_key "/etc/nginx/cert/key.key";

		root /www/data;

		location /api/auth {
      proxy_set_header  X-Real-IP        $remote_addr;
      proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;

      rewrite ^/api/auth/(.*)$ /$1 break;
			proxy_pass http://ms-auth:3001;
		}

		location /api/v1 {
      proxy_set_header  X-Real-IP        $remote_addr;
      proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;

      rewrite ^/api/v1/(.*)$ /$1 break;
			proxy_pass http://ms-catalog:3000;
		}

		location / {
			try_files $uri /index.html;
		}

		## All static files will be served directly.
		location ~* ^.+\.(?:css|cur|js|jpe?g|gif|htc|ico|png|html|xml|otf|ttf|eot|woff|woff2|svg)$ {
		    access_log off;
		    expires 30d;
		    add_header Cache-Control public;

		    ## No need to bleed constant updates. Send the all shebang in one
		    ## fell swoop.
		    tcp_nodelay off;

		    ## Set the OS file cache.
		    open_file_cache max=3000 inactive=120s;
		    open_file_cache_valid 45s;
		    open_file_cache_min_uses 2;
		    open_file_cache_errors off;
		}
	}

}